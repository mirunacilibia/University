9.
a) Sa se scrie o functie care intoarce diferenta a doua multimi.


I. Modele matematice

Vom avea 2 functii:
apare - care verifica daca un element apare intr-o lista
diferenta - care returneaza diferenta a doua multimi

apare(e, l1l2..ln) = 		{ false					, l e vida
				{ true					, l1 = e
				{ apare(e, l2..ln)			, altfel

diferenta(l1l2..ln, k1k2..kn) = { ∅					, l e vida
				{ diferenta(l2..ln, k1k2..kn)		, apare(l1, k1k2..kn) = true
				{ l1 (+) diferenta(l2..ln, k1k2..kn)	, altfel	

II. Implementarea Lisp

(defun apare(e l)
	(cond
		((null l) nil)
		((equal (car l) e) t)
		(t (apare e (cdr l)))
	)
)

(defun diferenta(a b)
	(cond
		((null a) nil)
		((apare (car a) b) (diferenta (cdr a) b))
		(t (append (list (car a)) (diferenta (cdr a) b)))
	)
)


III. Teste

(apare '1 '(1 2 3)))			-> T

(apare '0 '(1 2 3)))			-> NIL

(diferenta '(1 2 3 4 5 6) '(2 4 6)) 	-> (1 3 5)

(diferenta '(1 2 3 4 5 6) '(7 8)) 	-> (1 2 3 4 5 6)

(diferenta '() '(1 2 3 4)) 		-> NIL

(diferenta '(1 2 3 4 5 ) '(1 2 3 4 5))	-> NIL



b) Definiti o functie care inverseaza o lista impreuna cu toate sublistele sale de pe orice nivel.

I. Modele matematice

Vom avea o singura functie, invers, care va inversa fiecare element din lista, iar daca elementul este o lista,
o va inversa si pe aceasta

invers(l1l2...ln) = 	{ ∅					, l e vida
			{ invers(l2l3..ln) (+) l1		, l1 este atom
			{ invers(l2l3..ln) (+) invers(l1)	, l1 este lista

II. Implementare Lisp

(defun invers (l)
	(cond
		((null l) nil)
		((atom(car l))
			(append
				(invers(cdr l))
				(list (car l))
			)
		)
		((listp(car l))
			(append
				(invers(cdr l))
				(list(invers(car l)))
			)
		)
	)
)

III. Teste

(invers '(1 2 3 (4 5 6) 7 8 (9 10))) 		-> ((10 9) 8 7 (6 5 4) 3 2 1)

(invers '(1 2 3 4)) 				-> (4 3 2 1)

(invers '())					-> NIL

(invers '((1 2 3 (4 5)) 6 7 (7 (8 9) 10)))	-> ((10 (9 8) 7) 7 6 ((5 4) 3 2 1))


c) Dandu-se o lista, sa se construiasca lista primelor elemente ale tuturor elementelor lista ce au un
numar impar de elemente la nivel superficial. Exemplu: (1 2 (3 (4 5) (6 7)) 8 (9 10 11)) => (1 3 9).

I. Modele matematice

Vom avea nevoie de 2 functii, construire_impar si construire_wrapper
construire_impar - pentru fiecare element lista, verifica daca lungimea este numar impar si adauga primul
sau element in lista finala
construire_wrapper - aplica functia construire_impar si pentru lista initiala

construire_impar(l1l2..ln) = 	{ ∅					, l e vida
				{ k1 (+) construire_impar(l1l2..ln) 	, l1 e de forma k1k2..km si m e impar
				{ construire_impar(l1l2..ln) 		, altfel

construire_wrapper(l1l2..ln) = 	{ l1 (+) construire_impar(l1l2..ln) 	, n e impar
				{ construire_impar(l1l2..ln) 		, altfel


II. Implementare Lisp

(defun construire_impar(l)
	(cond
		((null l) nil)
		((and (listp (car l)) (=(mod(length(car l)) 2) 1))(append(list(caar l)) (construire_impar(cdr l))))
		(t(construire_impar(cdr l)))
	)

)

(defun construire_wrapper(l)
	(cond
		( (=(mod(length l) 2) 1)
			(append (list(car l)) (construire_impar l))
		)
		(t (construire_impar l))
	)
)

III. Teste

(construire_impar '(1 2 (1 2 3) 4 (1 (2 3) 4)))		-> (1 1)

(construire_impar '(1 (2 3 4) 5 (6 7) 8))		-> (2)

(construire_impar '(1 2 3 4 ))				-> NIL


(construire_wrapper '(1 2 (1 2 3) 4 (1 (2 3) 4)))	-> (1 1 1)

(construire_wrapper '(1 2 3 4 5))			-> (1)

(construire_wrapper '(1 2 3 4 ))			-> NIL

(construire_wrapper '(1 (2 3 4) 5 (6 7) 8))		-> (1 2)


d) Sa se construiasca o functie care intoarce suma atomilor numerici dintr-o lista, de la nivelul superficial.

I. Modele matematice

Vom avea o functie, suma, care pentru fiecare element care este numar din lista, il va aduna la suma

suma(l1l2..ln) = 	{ 0			, l e vida
			{ l1 + suma(l2l3..ln)	, l1 e numar
			{ suma(l2l3..ln)	, altfel

II. Implementare Lisp

(defun suma(l)
	(cond
		((null l) 0)
		((numberp(car l)) (+(car l)(suma(cdr l))))
		(t (suma(cdr l)))
	)

)

III. Teste

(suma '(1 2 3 4 5))			-> 15

(suma '(1 2 (3 4) 5))			-> 8

(suma '((1 2) (3 4)))			-> 0