Tema P3 - Backtracking

12. Se da sirul a1,..., an format din numere intregi distincte. Se cere sa se afiseze
toate submultimile cu aspect de "munte" (o secvență se spune ca are aspect de "munte" 
daca elementele cresc pana la un moment dat, apoi descresc. De ex. 10 16 27 18 14 7).

i) Modelul matematic

Vom avea 4 functii: 
1. candidat - returneaza pe rand cate un element din sir

candidat(l1l2...ln) =	{ l1			, l1..ln e nevida
			{ candidat(l2l3...ln)	, altfel

2. apare - returneaza adevarat daca un element E exista in lista, si fals daca nu

apare(l1l2...ln, E) =	{ true			, l1 = E
			{ false			, n = 0
			{ apare(l2l3...ln, E)	, altfel

3. munte_aux - predicat auxiliar nedeterminist care genereaza câte o combinare cu conditia data

	f - o variabila care are valoarea:	0 - la inceputul sirului
					 	1 - daca sirul descreste
						2 - daca sirul creste
	c1..cn - o lista colectoare unde formam sirul

* noi construim sirul de la coada la cap, deci trebuie ca prima oara sa avem o descrestere, urmata de o crestere


munte_aux(l1...ln, c1..cn, f) = { c1...cn				, f = 2 si candidat(l1..ln) > c1
				{ munte_aux(l2...ln, e (+) c1..cn, 1)	, f = 0, e = candidat(l1..ln), 
									  apare(c1..cn, e)
				{ munte_aux(l2...ln, e (+) c1..cn, 1)	, f = 1, e = candidat(l1..ln), 
									  apare(c1..cn, e) = false, e > c1
				{ munte_aux(l2...ln, e (+) c1..cn, 2)	, f = 1, e = candidat(l1..ln), 
									  apare(c1..cn, e) = false, e < c1
				{ munte_aux(l2...ln, e (+) c1..cn, 2)	, f = 2, e = candidat(l1..ln), 
									  apare(c1..cn, e) = false, e < c1

4. munte - predicatul de baza care genereaza un candidat si incepe generearea solutiilor

munte(l1...ln) = munte_aux(l1..ln, [e], 0)	, unde e = candidat(l1...ln)

ii) Implementarea Prolog + modele de flux

% candidat(L:list, E:integer)
% parametrii: lista, elementul rezultat
% modele de flux: (i, o), (i, i)

candidat([E|_], E).
candidat([_|T], E) :- candidat(T, E).

% apare(L:list, E:integer)
% parametrii: lista, elementul rezultat
% modele de flux: (i, i)

apare([E|_], E):- !.
apare([_|T], E) :- apare(T, E).

% munte_aux(L:list, S:list, Col: list, F:integer)
% parametrii: lista, submultimea rezultat, colectoarea, stadiul(urcare/coborare/inceput)
% modele de flux: (i, o, i, i), (i, i, i, i) 

munte_aux(_, Col, Col, F):- F = 2.
munte_aux(L, S, [H|Col], F) :-
    	F = 0,
	candidat(L, E),
    	\+ apare([H|Col], E),
    	E > H,
	munte_aux(L, S, [E|[H|Col]], 1).
munte_aux(L, S, [H|Col], F) :-
    	F = 1,
	candidat(L, E),
    	\+ apare([H|Col], E),
    	E > H,
	munte_aux(L, S, [E|[H|Col]], 1).
munte_aux(L, S, [H|Col], F) :-
   	F = 1,
	candidat(L, E),
    	\+ apare([H|Col], E),
    	E < H,
	munte_aux(L, S, [E|[H|Col]], 2).
munte_aux(L, S, [H|Col], F) :-
    	F = 2,
	candidat(L, E),
    	\+ apare([H|Col], E),
    	E < H,
	munte_aux(L, S, [E|[H|Col]], 2).

% munte(L:list, S:list)
% parametrii: lista, submultimea
% modele de flux: (i, o), (i, i)

munte(L, S) :-
	candidat(L, E), 
	munte_aux(L, S, [E], 0).



iii) Teste

munte([1, 2, 3, 4], S).
Rez:				[3, 4, 2, 1]	
				[2, 4, 3, 1]	
				[2, 3, 1]	
				[2, 4, 1]	
				[3, 4, 1]	
				[2, 3, 4, 1]	
				[1, 4, 3, 2]	
				[1, 3, 2]	
				[1, 4, 2]
				[3, 4, 2]	
				[1, 3, 4, 2]
				[1, 4, 3]
				[2, 4, 3]	
				[1, 2, 4, 3]

munte([9, 1, 3], S).
Rez:				[3, 9, 1]	
				[1, 9, 3]

munte([1, 2], S).
Rez:	false

munte([], S).
Rez:	false