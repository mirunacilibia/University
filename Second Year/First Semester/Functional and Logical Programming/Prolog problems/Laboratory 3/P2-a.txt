Tema de laborator P2 - problema 8

8.
a) Definiti un predicat care determina succesorul unui numarreprezentat cifra 
cu cifra intr-o lista. De ex: [1 9 3 5 9 9] => [1 9 3 6 0 0]

i) Modelul matematic

l1l2...ln - o lista de numere intregi

inverseaza_lista	-> functie care returneaza lista inversata, primul element fiind ultimul, samd
adunare			-> functie care aduna 1 la primul element al listei, dupa care pentru fiecare alt element
			   aduna 0 sau 1, in functie de rezultatul elementului de inainte
			   toate elementele din lista sunt cifre
adauga_unu		-> functie care adauga elementul 1 ca primul element al unei liste daca
			   in lista initiala primul element este 0


inverseaza_lista(l1l2...ln) =	{ ∅					, daca n = 0
				{ inverseaza_lista(l2l3...ln) (+) l1	, daca n > 0


adunare(l1l2...ln, k) =		{ ∅					, daca n = 0
				{ aux = (l1 + k) % 10,
				{ k = (l1 + k) / 10,
				{ aux (+) succesor(l2l3...ln, k)		, daca n > 0

adauga_unu(l1l2...ln) = 	{ 1 (+) l1l2...ln			, daca l1 = 0
				{ l1l2..ln				, daca l1 != 0

succesor(l1l2...ln) = adauga_unu(inverseaza_lista(adunare((inverseaza_lista(l1l2...ln), 1)))


ii) Implementarea in prolog + modele de flux

% el: integer
% list: el*
% L: lista
% 
% inverseaza_lista(Lista: list, L: list, L: list)
% 
% modele de flux: (i, i, o), (i, i, i), (i, o, i), (o, i, i)

inverseaza_lista([], L, L).
inverseaza_lista([H|T], R, L):-
    inverseaza_lista(T, [H|R], L).

% adunare(L: list, K: integer, R: list)
% L - lista initiala
% R - lista rezultat
% K - 0/1, numarul pe care il adunam la fiecare element
% 
% modele de flux: (i, i, o), (i, i, i)

adunare([], _, []).
adunare([H|T], K, [AUX|R]):-
    AUX is (H + K) mod 10,
    K1 is (H + K) div 10, !,
    adunare(T, K1, R).

% adauga_unu(L: list, R: list, L: list)
% L - lista initiala
% R - lista rezultat
% 
% modele de flux: (i, o, i), (i, i, i), (i, i, o), (o, i, o)

adauga_unu([], [], []).
adauga_unu([H|_], [1|L], L):-
    H = 0, !.
adauga_unu([H|_], L, L):-
    H \= 0.

% succesor(L: list, R: list)
% L - lista initiala
% R - lista rezultat
% 
% modele de flux: (i, o), (i, i)

succesor(L, R4):-
    inverseaza_lista(L, [], R1),
    adunare(R1, 1, R2),
    inverseaza_lista(R2, [], R3),
    adauga_unu(R3, R4, R3).

iii) Exemple

succesor([1, 9, 5, 9, 9], R). 			-> [1, 9, 6, 0, 0]
succesor([9, 9, 9, 9], R).			-> [1, 0, 0, 0, 0]
succesor([1, 2, 3, 4], R).			-> [1, 2, 3, 5]
succesor([], R).				-> []

inverseaza_lista([1, 9, 5, 9, 9], [], R).	-> [9, 9, 5, 9, 1]
inverseaza_lista([9, 9, 9, 9], [], R).		-> [9, 9, 9, 9]
inverseaza_lista([1, 2, 3, 4], [], R).		-> [4, 3, 2, 1]
inverseaza_lista([], [], R).			-> []

adunare([1, 9, 5, 9, 9], 1, R).			-> [2, 9, 5, 9, 9]
adunare([9, 9, 9, 9], 1, R).			-> [0, 0, 0, 0]
adunare([1, 8, 7, 9], 1, R).			-> [1, 8, 8, 0]
adunare([], 1, R).				-> []

adauga_unu([0, 9, 9], R, [0, 9, 9]).		-> [1, 0, 9, 9]
adauga_unu([9, 9], R, [9, 9]).			-> [9, 9]
adauga_unu([], R, []).				-> []	
